    /// This class represents a Tic-Tac-Toe game board.  It includes logic
    /// to keep track of player turns and assign board squares to a player
    /// </summary>
    public class TicTacToeGame
    {

        public enum Players { Player1, Player2 };
        protected Board board;

        protected Stack<TicTacToeMove> moves;
        protected Players currentTurn = Players.Player1; // Player 1 goes first 

        protected bool gameOver = false;

        /// <summary>
        /// Constructs a new TicTacToeGame using the default board pieces for player one and two
        /// </summary>
        public TicTacToeGame() : this(Board.Pieces.X, Board.Pieces.O)
        {

        }

        /// <summary>
        /// Constructs a new TicTacToe game using the specified player's pieces.
        /// 
        /// </summary>
        /// <param name="player1Piece">Player one's piece</param>
        /// <param name="player2Piece">Player two's piece</param>
        public TicTacToeGame(Board.Pieces player1Piece, Board.Pieces player2Piece)
        {
            this.player1Piece = player1Piece;
            this.player2Piece = player2Piece;
            board = new Board();
            moves = new Stack<TicTacToeMove>();
        }

        /// <summary>
        /// Returns true if the game is over (if there is a winner or there is a draw)
        /// </summary>
        /// <returns>true if the game is over or false otherwise</returns>
        public bool IsGameOver()
        {
            return board.IsGameOver();
        }

        /// <summary>
        /// Undoes the last move 
        /// </summary>
        public void UndoLastMove()
        {
            TicTacToeMove lastMove = moves.Pop();

            board.UndoMove(lastMove);

            SwapTurns();

        }

        /// <summary>
        /// Returns the player for whose turn it is
        /// </summary>
        public Players CurrentPlayerTurn
        {
            get { return this.currentTurn; }
        }

        /// <summary>
        /// Makes the move for the specified player
        /// </summary>
        /// <param name="m">The move to make</param>
        /// <param name="p">The player making the move</param>
        public void MakeMove(TicTacToeMove m, Players p)
        {

            if (currentTurn != p)
            {
                throw new InvalidMoveException("You went out of turn!");
            }

            if (!board.IsValidSquare(m.Position))
                throw new InvalidMoveException("Pick a square on the board!");

            board.MakeMove(m.Position, m.Piece);

            moves.Push(m);

            SwapTurns();

        }

       ...
       // more code here

    }
